name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: ankane/pgvector:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Configure PostgreSQL
      run: |
        PGPASSWORD=postgres psql -h localhost -U postgres -d test_db -c "CREATE EXTENSION IF NOT EXISTS vector;"
    
    - name: Run tests
      env:
        POSTGRES_SERVER: localhost
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: test_db
      run: |
        pytest --cov=app tests/
  
  deploy:
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - name: Deploy to server
      env:
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USER: ${{ secrets.SSH_USER }}
      run: |
        # Adicionar o host ao known_hosts
        ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
        
        # Transferir arquivos para o servidor
        rsync -avz --exclude '.git' --exclude 'venv' --exclude '__pycache__' ./ $SSH_USER@$SSH_HOST:/opt/raiox-app/
        
        # Executar comandos de implantação no servidor
        ssh $SSH_USER@$SSH_HOST << 'EOF'
          cd /opt/raiox-app
          
          # Atualizar ambiente virtual
          python3 -m venv venv || true
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # Reiniciar serviço
          sudo systemctl restart raiox-ai
          
          # Verificar status do serviço
          sudo systemctl status raiox-ai
        EOF
    
    - name: Verify deployment
      env:
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USER: ${{ secrets.SSH_USER }}
      run: |
        # Verificar se o serviço está em execução
        ssh $SSH_USER@$SSH_HOST "curl -s http://localhost:8000/healthcheck || echo 'Healthcheck failed'"
